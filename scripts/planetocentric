#!/usr/bin/env python
"""Usage: planetocentric.py [--crs CRS][--inf INF] IN_DATASET OUT_DATASET

Process IN_DATASET and convert coordinates from planetographic to planetocentric.
This was built to assist with export of features from SOCET SET into other GIS
workflows.

Arguments:
  IN_DATASET   input file (can be any OGR-recognizable format)
  OUT_DATASET  output file (will be written in same format as input)

Options:
  --inf <INF>  inverse flattening associated with input data.
  			   Note: it is unreliable to pull flattening from SOCET SET-generated
  			   .prj file, because the value for Earth is included in the file by default.
  			   [default: 169.89444722361179] (this is Mars2000's value)
  --crs <CRS>  coordinate reference system. Acceptable types include wkt text,
               file containing wkt, or proj4 string.
               [default: +proj=longlat +lat_0=0 +a=3396190 +b=3396190] (Mars2000)
  -h --help
"""

import numpy as N
import fiona
from fiona import crs
from osgeo import osr
import os
from attitudes.proj import get_crs

def planetocentric(inlat, equatorial_radius, polar_radius=None):
	"""Converts a planetographic latitude to planetocentric"""
	if abs(inlat) > 90: return lat

	lat = N.radians(inlat)
	lat = N.tan(lat)*(polar_radius/equatorial_radius)**2
	lat = N.arctan(lat)
	return N.degrees(lat)

def radii(semimajor_axis, inverse_flattening):
	semiminor_axis = semimajor_axis-semimajor_axis/inverse_flattening
	return semimajor_axis, semiminor_axis

def iterator_factory(semimajor, semiminor):
	print "Input CRS:"
	print "Semimajor axis: {0}".format(semimajor)
	print "Semiminor axis: {0}".format(semiminor)
	def planetocentric_coords(coordinates):
		for coord in coordinates:
			coord = list(coord)
			coord[1] = planetocentric(coord[1], semimajor, semiminor)
			yield tuple(coord)
	return planetocentric_coords

if __name__ == "__main__":
	from docopt import docopt
	args = docopt(__doc__)
	print args

	prjfile = os.path.splitext(args["IN_DATASET"])[0]+".prj"
	with open(prjfile,"r") as proj:
		spatial_ref = osr.SpatialReference()
		spatial_ref.ImportFromWkt(proj.read())
		semimajor = spatial_ref.GetSemiMajor()
		semiminor = spatial_ref.GetSemiMinor()
		transform = iterator_factory(*radii(semimajor, float(args["--inf"])))

	infile = fiona.open(args["IN_DATASET"], "r")
	outfile = fiona.open(
		args["OUT_DATASET"],
		"w",
		driver = infile.driver,
		schema = infile.schema,
		crs = get_crs(args["--crs"])
	)

	with infile as in_, outfile as out_:

		for feature in in_:
			coords = feature["geometry"]["coordinates"]
			feature["geometry"]["coordinates"] = list(transform(coords))
			out_.write(feature)

